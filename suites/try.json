[
    "# Collection of Tests for Try",
    {
        "description": "Coalesce an error",
        "rule": { "try": [{ "error": "Some error" }, 1] },
        "result": 1,
        "data": null
    },
    {
        "description": "Coalesce an error emitted from an operator",
        "rule": { "try": [{ "/": [0, 0]}, 1] },
        "result": 1,
        "data": { "hello": "world" }
    },
    {
        "description": "Try is variadic",
        "rule": { "try": [{ "error": "Some error" }, { "/": [0, 0] }, 2] },
        "result": 2,
        "data": null
    },
    {
        "description": "Panics if none of the values are valid",
        "rule": { "try": [{ "error": "Some error" }, { "error": "Some other error" }] },
        "error": true,
        "data": null
    },
    {
        "description": "Panics if none of the values are valid (2)",
        "rule": { "try": [{ "error": "Some error" }, { "/": [0, 0] }] },
        "error": true,
        "data": null
    },
    {
        "description": "Panics if none of the values are valid (3)",
        "rule": { "try": [{ "/": [0, 0] }, { "/": [1, 0] }, { "/": [2, 0] }] },
        "error": true,
        "data": null
    },
    {
        "description": "Panics when the only argument is an error",
        "rule": { "try": { "error": "Some error" } },
        "error": true,
        "data": null
    },
    {
        "description": "Panic with an error emitted from an operator",
        "rule": { "try": [{ "/": [1, 0] }] },
        "error": true,
        "data": null
    },
    {
        "description": "Panic within an iterator",
        "rule": { "map": [[1, 2, 3], { "try": [{ "/": [0,0] }] }] },
        "error": true,
        "data": null
    },
    {
        "description": "Panic based on an error emitted from an if",
        "rule": { "try": [{ "if": [{"val": ["user", "admin"]}, true, { "error": "Not an admin" }] }] },
        "data": { "user": { "admin": false } },
        "error": true
    },
    {
        "description": "Try can work further up the AST with Exceptions",
        "rule": {
            "try": [{
                "if": [
                    true,
                    { "map": [[1,2,3], {"/": [0, 0] }]},
                    null
                ]
            }, 10]
        },
        "result": 10,
        "data": null
    },
    {
        "description": "The context switches for the try coalescing to the previous error",
        "rule": {
            "try": [
                { "error": "Some error" },
                { "val": "error" }
            ]
        },
        "result": "Some error",
        "data": null
    },
    {
        "description": "The context switches for the try coalescing to the previous error (2)",
        "rule": {
            "try": [
                { "if": [true, { "error": "Some error" }, null] },
                { "val": "error" }
            ]
        },
        "result": "Some error",
        "data": null
    },
    {
        "description": "The context switches for the try coalescing to the previous error (3)",
        "rule": {
            "try": [
                { "error": "A" },
                { "error": "B" },
                { "val": "error" }
            ]
        },
        "result": "B",
        "data": null
    },
    {
        "description": "Error can pull from an error object",
        "rule": {
            "try": [{ "error": { "val": "x" } }, { "val": "error" }]
        },
        "data": { "x": { "error": "Some error" }},
        "result": "Some error"
    },
    {
        "description": "Try can work further up the AST with Exceptions, and return the error",
        "rule": {
            "try": [{
                "if": [
                    true,
                    { "map": [[1,2,3], {"/": [0, 0] }]},
                    null
                ]
            }, { "val": "error" }]
        },
        "result": "NaN",
        "data": null
    },
    {
        "description": "Handles NaN Explicitly",
        "rule": {
            "try": [
                { "if": [{ "/": [1, { "val": "x" }] }, { "error": "Some error" }, null] },
                {
                    "if": [{ "===": [{ "val": "error" }, "NaN"]}, "Handled", { "error": { "val": [] } }]
                }
            ]
        },
        "result": "Handled",
        "data": { "x": 0 }
    },
    {
        "description": "Did not NaN, so it errored",
        "rule": {
            "try": [
                { "if": [{ "/": [1, { "val": "x" }] }, { "error": "Some error" }, null] },
                { "if": [{ "===": [{ "val": "error" }, "NaN"]}, "Handled", { "error": { "val": [] } }] }
            ]
        },
        "error": true,
        "data": { "x": 1 }
    },
    "# Not Proposed",
    {
        "description": "Try can work further up the AST with Exceptions; Grabbing other Context value",
        "rule": {
            "try": [{
                "if": [
                    true,
                    { "map": [[1,2,3], {"/": [0, 0] }]},
                    null
                ]
            }, { "val": [[2], "fallback"] }]
        },
        "result": "Hello",
        "data": { "fallback": "Hello" }
    }
]