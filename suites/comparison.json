[
    "This is a set of comparisons with variadic amounts",
    {
        "description": "< with 3 arguments",
        "rule": { "<": [1, 2, 3] },
        "data": {},
        "result": true
    },
    {
        "description": "> with 3 arguments",
        "rule": { ">": [3, 2, 1] },
        "data": {},
        "result": true
    },
    {
        "description": "> with 3 arguments failing",
        "rule": { ">": [3, 2, 3] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with 3 arguments",
        "rule": { ">=": [3, 3, 1] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with 3 arguments failing",
        "rule": { ">=": [3, 3, 4] },
        "data": {},
        "result": false
    },
    {
        "description": "== with 3 arguments",
        "rule": { "==": [3, 3, 3] },
        "data": {},
        "result": true
    },
    {
        "description": "== with 3 arguments failing",
        "rule": { "==": [3, 2, 3] },
        "data": {},
        "result": false
    },
    {
        "description": "!= with 3 arguments",
        "rule": { "!=": [3, 2, 3] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with 3 arguments failing",
        "rule": { "!==": [3, 3, 3] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with 3 arguments",
        "rule": { "===": [3, 3, 3] },
        "data": {},
        "result": true
    },
    {
        "description": "=== with 3 arguments failing",
        "rule": { "===": [3, 3, 2] },
        "data": {},
        "result": false
    },
    {
        "description": "< is lazily evaluated",
        "rule": { "<": [3, 2, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "> is lazily evaluated",
        "rule": { ">": [2, 3, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "<= is lazily evaluated",
        "rule": { "<=": [3, 2, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": ">= is lazily evaluated",
        "rule": { ">=": [2, 3, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "== is lazily evaluated",
        "rule": { "==": [3, 2, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "!= is lazily evaluated",
        "rule": { "!=": [3, 3, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "=== is lazily evaluated",
        "rule": { "===": [3, 2, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "!== is lazily evaluated",
        "rule": { "!==": [3, 3, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    "Single Operand < Tests",
    {
        "description": "< with 1 argument",
        "rule": { "<": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "> with 1 argument",
        "rule": { ">": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": ">= with 1 argument",
        "rule": { ">=": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "== with 1 argument",
        "rule": { "==": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!= with 1 argument",
        "rule": { "!=": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "=== with 1 argument",
        "rule": { "===": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!== with 1 argument",
        "rule": { "!==": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    "Direct Operand Tests",
    {
        "description": "< with direct argument",
        "rule": { "<": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "> with direct argument",
        "rule": { ">": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": ">= with direct argument",
        "rule": { ">=": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "== with direct argument",
        "rule": { "==": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!= with direct argument",
        "rule": { "!=": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "=== with direct argument",
        "rule": { "===": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!== with direct argument",
        "rule": { "!==": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    "Empty Operand Tests",
    {
        "description": "< with empty argument",
        "rule": { "<": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "> with empty argument",
        "rule": { ">": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": ">= with empty argument",
        "rule": { ">=": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "== with empty argument",
        "rule": { "==": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!= with empty argument",
        "rule": { "!=": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "=== with empty argument",
        "rule": { "===": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!== with empty argument",
        "rule": { "!==": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    }
]