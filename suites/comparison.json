[
    "This is a set of comparisons with variadic amounts",
    {
        "description": "< with 3 arguments",
        "rule": { "<": [1, 2, 3] },
        "data": {},
        "result": true
    },
    {
        "description": "> with 3 arguments",
        "rule": { ">": [3, 2, 1] },
        "data": {},
        "result": true
    },
    {
        "description": "> with 3 arguments failing",
        "rule": { ">": [3, 2, 3] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with 3 arguments",
        "rule": { ">=": [3, 3, 1] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with 3 arguments failing",
        "rule": { ">=": [3, 3, 4] },
        "data": {},
        "result": false
    },
    {
        "description": "== with 3 arguments",
        "rule": { "==": [3, 3, 3] },
        "data": {},
        "result": true
    },
    {
        "description": "== with 3 arguments failing",
        "rule": { "==": [3, 2, 3] },
        "data": {},
        "result": false
    },
    {
        "description": "!= with 3 arguments",
        "rule": { "!=": [3, 2, 3] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with 3 arguments failing",
        "rule": { "!==": [3, 3, 3] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with 3 arguments",
        "rule": { "===": [3, 3, 3] },
        "data": {},
        "result": true
    },
    {
        "description": "=== with 3 arguments failing",
        "rule": { "===": [3, 3, 2] },
        "data": {},
        "result": false
    },
    {
        "description": "< is lazily evaluated",
        "rule": { "<": [3, 2, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "> is lazily evaluated",
        "rule": { ">": [2, 3, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "<= is lazily evaluated",
        "rule": { "<=": [3, 2, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": ">= is lazily evaluated",
        "rule": { ">=": [2, 3, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "== is lazily evaluated",
        "rule": { "==": [3, 2, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "!= is lazily evaluated",
        "rule": { "!=": [3, 3, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "=== is lazily evaluated",
        "rule": { "===": [3, 2, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    {
        "description": "!== is lazily evaluated",
        "rule": { "!==": [3, 3, { "throw": "Not Lazy" }] },
        "data": {},
        "result": false
    },
    "Single Operand < Tests",
    {
        "description": "< with 1 argument",
        "rule": { "<": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "> with 1 argument",
        "rule": { ">": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": ">= with 1 argument",
        "rule": { ">=": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "== with 1 argument",
        "rule": { "==": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!= with 1 argument",
        "rule": { "!=": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "=== with 1 argument",
        "rule": { "===": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!== with 1 argument",
        "rule": { "!==": [1] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    "Direct Operand Tests",
    {
        "description": "< with direct argument",
        "rule": { "<": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "> with direct argument",
        "rule": { ">": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": ">= with direct argument",
        "rule": { ">=": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "== with direct argument",
        "rule": { "==": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!= with direct argument",
        "rule": { "!=": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "=== with direct argument",
        "rule": { "===": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!== with direct argument",
        "rule": { "!==": 1 },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    "Empty Operand Tests",
    {
        "description": "< with empty argument",
        "rule": { "<": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "> with empty argument",
        "rule": { ">": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": ">= with empty argument",
        "rule": { ">=": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "== with empty argument",
        "rule": { "==": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!= with empty argument",
        "rule": { "!=": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "=== with empty argument",
        "rule": { "===": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    {
        "description": "!== with empty argument",
        "rule": { "!==": [] },
        "data": {},
        "error": { "type": "Invalid Arguments" }
    },
    "Boolean Tests",
    {
        "description": "< with (false, true)",
        "rule": { "<": [false, true] },
        "data": {},
        "result": true
    },
    {
        "description": "< with (true, false)",
        "rule": { "<": [true, false] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (false, false)",
        "rule": { "<": [false, false] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (true, true)",
        "rule": { "<": [true, true] },
        "data": {},
        "result": false
    },
    {
        "description": "> with (false, true)",
        "rule": { ">": [false, true] },
        "data": {},
        "result": false
    },
    {
        "description": "> with (true, false)",
        "rule": { ">": [true, false] },
        "data": {},
        "result": true
    },
    {
        "description": "> with (false, false)",
        "rule": { ">": [false, false] },
        "data": {},
        "result": false
    },
    {
        "description": "> with (true, true)",
        "rule": { ">": [true, true] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with (false, true)",
        "rule": { ">=": [false, true] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with (true, false)",
        "rule": { ">=": [true, false] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (false, false)",
        "rule": { ">=": [false, false] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (true, true)",
        "rule": { ">=": [true, true] },
        "data": {},
        "result": true
    },
    {
        "description": "== with (false, true)",
        "rule": { "==": [false, true] },
        "data": {},
        "result": false
    },
    {
        "description": "== with (true, false)",
        "rule": { "==": [true, false] },
        "data": {},
        "result": false
    },
    {
        "description": "== with (false, false)",
        "rule": { "==": [false, false] },
        "data": {},
        "result": true
    },
    {
        "description": "== with (true, true)",
        "rule": { "==": [true, true] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (false, true)",
        "rule": { "!=": [false, true] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (true, false)",
        "rule": { "!=": [true, false] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (false, false)",
        "rule": { "!=": [false, false] },
        "data": {},
        "result": false
    },
    {
        "description": "!= with (true, true)",
        "rule": { "!=": [true, true] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (false, true)",
        "rule": { "===": [false, true] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (true, false)",
        "rule": { "===": [true, false] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (false, false)",
        "rule": { "===": [false, false] },
        "data": {},
        "result": true
    },
    {
        "description": "=== with (true, true)",
        "rule": { "===": [true, true] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (false, true)",
        "rule": { "!==": [false, true] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (true, false)",
        "rule": { "!==": [true, false] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (false, false)",
        "rule": { "!==": [false, false] },
        "data": {},
        "result": false
    },
    {
        "description": "!== with (true, true)",
        "rule": { "!==": [true, true] },
        "data": {},
        "result": false
    },
    "String Tests",
    {
        "description": "< with (a, b)",
        "rule": { "<": ["a", "b"] },
        "data": {},
        "result": true
    },
    {
        "description": "< with (b, a)",
        "rule": { "<": ["b", "a"] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (a, a)",
        "rule": { "<": ["a", "a"] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (2024-01-01, 2024-01-02)",
        "rule": { "<": ["2024-01-01", "2024-01-02"] },
        "data": {},
        "result": true
    },
    {
        "description": "< with (2024-01-02, 2024-01-01)",
        "rule": { "<": ["2024-01-02", "2024-01-01"] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (2024-01-01, 2024-01-01)",
        "rule": { "<": ["2024-01-01", "2024-01-01"] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (2023, 2024-01-01)",
        "rule": { "<": ["2023", "2024-01-01"] },
        "data": {},
        "result": true
    },
    {
        "description": "> with (a, b)",
        "rule": { ">": ["a", "b"] },
        "data": {},
        "result": false
    },
    {
        "description": "> with (b, a)",
        "rule": { ">": ["b", "a"] },
        "data": {},
        "result": true
    },
    {
        "description": "> with (a, a)",
        "rule": { ">": ["a", "a"] },
        "data": {},
        "result": false
    },
    {
        "description": "> with (2024-01-01, 2024-01-02)",
        "rule": { ">": ["2024-01-01", "2024-01-02"] },
        "data": {},
        "result": false
    },
    {
        "description": "> with (2024-01-02, 2024-01-01)",
        "rule": { ">": ["2024-01-02", "2024-01-01"] },
        "data": {},
        "result": true
    },
    {
        "description": "> with (2024-01-01, 2024-01-01)",
        "rule": { ">": ["2024-01-01", "2024-01-01"] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with (a, b)",
        "rule": { ">=": ["a", "b"] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with (b, a)",
        "rule": { ">=": ["b", "a"] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (a, a)",
        "rule": { ">=": ["a", "a"] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (2024-01-01, 2024-01-02)",
        "rule": { ">=": ["2024-01-01", "2024-01-02"] },
        "data": {},
        "result": false
    },
    {
        "description": ">= with (2024-01-02, 2024-01-01)",
        "rule": { ">=": ["2024-01-02", "2024-01-01"] },
        "data": {},
        "result": true
    },
    {
        "description": ">= with (2024-01-01, 2024-01-01)",
        "rule": { ">=": ["2024-01-01", "2024-01-01"] },
        "data": {},
        "result": true
    },
    {
        "description": "== with (a, b)",
        "rule": { "==": ["a", "b"] },
        "data": {},
        "result": false
    },
    {
        "description": "== with (b, a)",
        "rule": { "==": ["b", "a"] },
        "data": {},
        "result": false
    },
    {
        "description": "== with (a, a)",
        "rule": { "==": ["a", "a"] },
        "data": {},
        "result": true
    },
    {
        "description": "== with (2024-01-01, 2024-01-02)",
        "rule": { "==": ["2024-01-01", "2024-01-02"] },
        "data": {},
        "result": false
    },
    {
        "description": "== with (2024-01-02, 2024-01-01)",
        "rule": { "==": ["2024-01-02", "2024-01-01"] },
        "data": {},
        "result": false
    },
    {
        "description": "== with (2024-01-01, 2024-01-01)",
        "rule": { "==": ["2024-01-01", "2024-01-01"] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (a, b)",
        "rule": { "!=": ["a", "b"] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (b, a)",
        "rule": { "!=": ["b", "a"] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (a, a)",
        "rule": { "!=": ["a", "a"] },
        "data": {},
        "result": false
    },
    {
        "description": "!= with (2024-01-01, 2024-01-02)",
        "rule": { "!=": ["2024-01-01", "2024-01-02"] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (2024-01-02, 2024-01-01)",
        "rule": { "!=": ["2024-01-02", "2024-01-01"] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (2024-01-01, 2024-01-01)",
        "rule": { "!=": ["2024-01-01", "2024-01-01"] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (a, b)",
        "rule": { "===": ["a", "b"] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (b, a)",
        "rule": { "===": ["b", "a"] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (a, a)",
        "rule": { "===": ["a", "a"] },
        "data": {},
        "result": true
    },
    {
        "description": "=== with (2024-01-01, 2024-01-02)",
        "rule": { "===": ["2024-01-01", "2024-01-02"] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (2024-01-02, 2024-01-01)",
        "rule": { "===": ["2024-01-02", "2024-01-01"] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (2024-01-01, 2024-01-01)",
        "rule": { "===": ["2024-01-01", "2024-01-01"] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (a, b)",
        "rule": { "!==": ["a", "b"] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (b, a)",
        "rule": { "!==": ["b", "a"] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (a, a)",
        "rule": { "!==": ["a", "a"] },
        "data": {},
        "result": false
    },
    {
        "description": "!== with (2024-01-01, 2024-01-02)",
        "rule": { "!==": ["2024-01-01", "2024-01-02"] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (2024-01-02, 2024-01-01)",
        "rule": { "!==": ["2024-01-02", "2024-01-01"] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (2024-01-01, 2024-01-01)",
        "rule": { "!==": ["2024-01-01", "2024-01-01"] },
        "data": {},
        "result": false
    },
    "Numeric and String Checks", 
    {
        "description": "< with (2023n, 2024-01-01s)",
        "rule": { "<": [2023, "2024-01-01"] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": "< with (5s, 3n)",
        "rule": { "<": ["5", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (21s, 3n)",
        "rule": { "<": ["21", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (21n, 3s)",
        "rule": { "<": [21, "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3s, 21n)",
        "rule": { "<": ["3", 21] },
        "data": {},
        "result": true
    },
    {
        "description": "< with (3n, 21s)",
        "rule": { "<": [3, "21"] },
        "data": {},
        "result": true
    },
    {
        "description": "< with (3n, 3s)",
        "rule": { "<": [3, "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3s, 3n)",
        "rule": { "<": ["3", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3n, 3n)",
        "rule": { "<": [3, 3] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3s, 3s)",
        "rule": { "<": ["3", "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3n, 3)",
        "rule": { "<": [3, 3] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3, 3n)",
        "rule": { "<": [3, 3] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3s, 3)",
        "rule": { "<": ["3", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3, 3s)",
        "rule": { "<": [3, "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3n, 3n)",
        "rule": { "<": [3, 3] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3s, 3s)",
        "rule": { "<": ["3", "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3n, 3s)",
        "rule": { "<": [3, "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "< with (3s, 3n)",
        "rule": { "<": ["3", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "> with (2023n, 2024-01-01s)",
        "rule": { ">": [2023, "2024-01-01"] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": "> with (5s, 3n)",
        "rule": { ">": ["5", 3] },
        "data": {},
        "result": true
    },
    {
        "description": "> with (21s, 3n)",
        "rule": { ">": ["21", 3] },
        "data": {},
        "result": true
    },
    {
        "description": "> with (21n, 3s)",
        "rule": { ">": [21, "3"] },
        "data": {},
        "result": true
    },
    {
        "description": "> with (3s, 21n)",
        "rule": { ">": ["3", 21] },
        "data": {},
        "result": false
    },
    {
        "description": "> with (3n, 21s)",
        "rule": { ">": [3, "21"] },
        "data": {},
        "result": false
    },
    {
        "description": "> with (3n, 3s)",
        "rule": { ">": [3, "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "> with (3s, 3n)",
        "rule": { ">": ["3", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "<= with (2023n, 2024-01-01s)",
        "rule": { "<=": [2023, "2024-01-01"] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": "<= with (5s, 3n)",
        "rule": { "<=": ["5", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "<= with (21s, 3n)",
        "rule": { "<=": ["21", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "<= with (21n, 3s)",
        "rule": { "<=": [21, "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "<= with (3s, 21n)",
        "rule": { "<=": ["3", 21] },
        "data": {},
        "result": true
    },
    {
        "description": "<= with (3n, 21s)",
        "rule": { "<=": [3, "21"] },
        "data": {},
        "result": true
    },
    {
        "description": "<= with (3n, 3s)",
        "rule": { "<=": [3, "3"] },
        "data": {},
        "result": true
    },
    {
        "description": "<= with (3s, 3n)",
        "rule": { "<=": ["3", 3] },
        "data": {},
        "result": true
    },
    {
        "description": "== with (2023n, 2024-01-01s)",
        "rule": { "==": [2023, "2024-01-01"] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": "== with (5s, 3n)",
        "rule": { "==": ["5", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "== with (21s, 3n)",
        "rule": { "==": ["21", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "== with (21n, 3s)",
        "rule": { "==": [21, "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "== with (3s, 21n)",
        "rule": { "==": ["3", 21] },
        "data": {},
        "result": false
    },
    {
        "description": "== with (3n, 21s)",
        "rule": { "==": [3, "21"] },
        "data": {},
        "result": false
    },
    {
        "description": "== with (3n, 3s)",
        "rule": { "==": [3, "3"] },
        "data": {},
        "result": true
    },
    {
        "description": "== with (3s, 3n)",
        "rule": { "==": ["3", 3] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (2023n, 2024-01-01s)",
        "rule": { "!=": [2023, "2024-01-01"] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": "!= with (5s, 3n)",
        "rule": { "!=": ["5", 3] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (21s, 3n)",
        "rule": { "!=": ["21", 3] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (21n, 3s)",
        "rule": { "!=": [21, "3"] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (3s, 21n)",
        "rule": { "!=": ["3", 21] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (3n, 21s)",
        "rule": { "!=": [3, "21"] },
        "data": {},
        "result": true
    },
    {
        "description": "!= with (3n, 3s)",
        "rule": { "!=": [3, "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "!= with (3s, 3n)",
        "rule": { "!=": ["3", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (2023n, 2024-01-01s)",
        "rule": { "===": [2023, "2024-01-01"] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": "=== with (5s, 3n)",
        "rule": { "===": ["5", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (21s, 3n)",
        "rule": { "===": ["21", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (21n, 3s)",
        "rule": { "===": [21, "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (3s, 21n)",
        "rule": { "===": ["3", 21] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (3n, 21s)",
        "rule": { "===": [3, "21"] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (3n, 3s)",
        "rule": { "===": [3, "3"] },
        "data": {},
        "result": false
    },
    {
        "description": "=== with (3s, 3n)",
        "rule": { "===": ["3", 3] },
        "data": {},
        "result": false
    },
    {
        "description": "!== with (2023n, 2024-01-01s)",
        "rule": { "!==": [2023, "2024-01-01"] },
        "data": {},
        "error": { "type": "NaN" }
    },
    {
        "description": "!== with (5s, 3n)",
        "rule": { "!==": ["5", 3] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (21s, 3n)",
        "rule": { "!==": ["21", 3] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (21n, 3s)",
        "rule": { "!==": [21, "3"] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (3s, 21n)",
        "rule": { "!==": ["3", 21] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (3n, 21s)",
        "rule": { "!==": [3, "21"] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (3n, 3s)",
        "rule": { "!==": [3, "3"] },
        "data": {},
        "result": true
    },
    {
        "description": "!== with (3s, 3n)",
        "rule": { "!==": ["3", 3] },
        "data": {},
        "result": true
    }
]